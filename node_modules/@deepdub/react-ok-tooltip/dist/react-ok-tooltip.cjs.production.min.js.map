{"version":3,"file":"react-ok-tooltip.cjs.production.min.js","sources":["../src/Component/use-singleton.ts","../src/tooltip-methods.ts","../src/Component/Tooltip.utils.ts","../src/tooltip-helpers.ts","../src/tooltip-groups.ts","../src/Component/Tooltip.tsx","../src/tooltip.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nconst singletons: { [name: string]: boolean } = {};\n\nexport function useSingleton(name: string) {\n  useEffect(() => {\n    if (singletons[name]) {\n      throw new Error(\n        `Singletons can only be rendered once (rendering \"${name}\").`\n      );\n    }\n\n    singletons[name] = true;\n\n    return () => {\n      singletons[name] = false;\n    };\n  }, [name]);\n}\n","import { deferredHideTooltip, deferredShowTooltip } from './tooltip-helpers';\n\nexport const DEFAULT_DELAY = 1000;\n\nexport interface TooltipProps {\n  title: string;\n  subtitle?: string;\n  maxWidth?: string;\n}\n\ninterface GlobalTooltipProps {\n  delay: number;\n}\n\ninterface TooltipMethods {\n  setPopperTooltipTriggerRef?: (element: HTMLElement | null) => void;\n  setAppTooltipProps?: (props: TooltipProps | undefined) => void;\n  setAppTooltipVisible?: (visible: boolean) => void;\n  popperTooltipUpdate?: Function | null;\n}\n\nexport const tooltipMethods: TooltipMethods = {};\n\nexport const globalTooltipProps: GlobalTooltipProps = {\n  delay: DEFAULT_DELAY,\n};\n\nexport function resetTooltipMethods() {\n  (Object.keys(tooltipMethods) as (keyof TooltipMethods)[]).forEach((key) => {\n    delete tooltipMethods[key];\n  });\n}\n\nexport function initTooltipMethods(methods: TooltipMethods) {\n  Object.assign(tooltipMethods, methods);\n}\n\nexport function setGlobalTooltipProps(props: GlobalTooltipProps) {\n  Object.assign(globalTooltipProps, props);\n}\n","export function createCssVarsForStyleProp(cssVars: {\n  [name: string]: string | number;\n}) {\n  return cssVars as any;\n}\n\nexport function cx(...args: (string | null | undefined)[]) {\n  return args.filter(Boolean).join(' ');\n}\n","type TooltipState =\n  | 'await-show'\n  | 'visible'\n  | 'await-hide'\n  | 'hidden-grace'\n  | 'hidden';\n\nlet state: TooltipState = 'hidden';\nlet timeout: number;\n\nfunction wait(callback: Function, delay: number) {\n  timeout = window.setTimeout(callback, delay);\n}\n\nfunction unwait() {\n  clearTimeout(timeout);\n}\n\nexport function deferredShowTooltip(delay: number, showTooltip: Function) {\n  if (state === 'await-show') {\n    return;\n  }\n\n  if (state === 'visible') {\n    return;\n  }\n\n  if (state === 'await-hide' || state === 'hidden-grace') {\n    unwait();\n    state = 'visible';\n    showTooltip();\n  }\n\n  if (state === 'hidden') {\n    state = 'await-show';\n\n    wait(() => {\n      state = 'visible';\n      showTooltip();\n    }, delay);\n  }\n}\n\nexport function deferredHideTooltip(hideTooltip: Function) {\n  if (state === 'await-show') {\n    unwait();\n    state = 'hidden';\n  }\n\n  if (state === 'visible') {\n    state = 'await-hide';\n    wait(() => {\n      hideTooltip();\n      state = 'hidden-grace';\n      wait(() => {\n        state = 'hidden';\n      }, 500);\n    }, 50);\n  }\n\n  if (state === 'await-hide') {\n    return;\n  }\n\n  if (state === 'hidden-grace') {\n    return;\n  }\n\n  if (state === 'hidden') {\n    return;\n  }\n}\n","export const tooltipGroups: { [groupId: string]: HTMLElement } = {};\n\nexport function tooltipGroup(groupId?: string) {\n  return (element: HTMLElement | null) => {\n    groupId ??= `tooltipGroup_${Math.round(Math.random() * 100000).toString()}`;\n\n    function handleMouseOver(e: MouseEvent) {\n      tooltipGroups[groupId!] = e.currentTarget as HTMLElement;\n    }\n\n    if (!element) {\n      return;\n    }\n\n    element.addEventListener('mouseover', handleMouseOver, { capture: true });\n    element.dataset.okTooltipGroupId = groupId;\n  };\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  useArrowContainer,\n  usePopover,\n  PopoverState,\n} from 'react-tiny-popover';\nimport { useSingleton } from './use-singleton';\nimport {\n  DEFAULT_DELAY,\n  initTooltipMethods,\n  resetTooltipMethods,\n  setGlobalTooltipProps,\n} from '../tooltip-methods';\nimport { createCssVarsForStyleProp, cx } from './Tooltip.utils';\nimport styles from './Tooltip.module.scss';\n\nexport default function Tooltip({\n  backgroundColor = 'var(--color-black)',\n  borderColor = '#3a3a3a',\n  arrowSize = 5,\n  delay = DEFAULT_DELAY,\n  className,\n  arrowClassName,\n}: {\n  backgroundColor?: string;\n  borderColor?: string;\n  arrowSize?: number;\n  delay?: number;\n  className?: string;\n  arrowClassName?: string;\n} = {}) {\n  useSingleton('tooltip');\n\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n  const [popoverState, setPopoverState] = useState<PopoverState>({\n    childRect: {} as any,\n    popoverRect: {} as any,\n    parentRect: {} as any,\n    boundaryRect: {} as any,\n    padding: 10,\n    nudgedLeft: 0,\n    nudgedTop: 0,\n    boundaryInset: 10,\n  });\n\n  const childRef = useRef<HTMLElement>();\n\n  const { positionPopover, popoverRef } = usePopover({\n    childRef,\n    positions: ['bottom'],\n    align: 'center',\n    padding: 10,\n    reposition: true,\n    boundaryInset: 0,\n    parentElement: document.body,\n    boundaryElement: document.body,\n    onPositionPopover: setPopoverState,\n  });\n\n  const { arrowContainerStyle, arrowStyle } = useArrowContainer({\n    ...popoverState,\n    arrowColor: backgroundColor,\n    arrowSize: arrowSize,\n  });\n\n  useEffect(() => {\n    initTooltipMethods({\n      setPopperTooltipTriggerRef: (ref) => {\n        childRef.current = ref ?? undefined;\n      },\n      setAppTooltipProps: (props) => {\n        if (\n          !props ||\n          !contentRef.current ||\n          !titleRef.current ||\n          !subtitleRef.current\n        ) {\n          return;\n        }\n\n        contentRef.current.style.maxWidth = props.maxWidth ?? 'none';\n        titleRef.current.innerText = props.title;\n        subtitleRef.current.style.display = props.subtitle ? 'block' : 'none';\n        subtitleRef.current.innerText = props.subtitle ?? '';\n      },\n      setAppTooltipVisible: setTooltipVisible,\n      popperTooltipUpdate: positionPopover,\n    });\n\n    return () => {\n      resetTooltipMethods();\n    };\n  }, [positionPopover]);\n\n  useEffect(() => {\n    setGlobalTooltipProps({\n      delay: delay,\n    });\n  }, [delay]);\n\n  const contentRef = useRef<HTMLDivElement>(null);\n  const titleRef = useRef<HTMLDivElement>(null);\n  const subtitleRef = useRef<HTMLDivElement>(null);\n\n  return ReactDOM.createPortal(\n    <div\n      ref={popoverRef}\n      className={cx(styles.tooltipContainer, className)}\n      style={{\n        visibility: tooltipVisible ? 'visible' : 'hidden',\n        ...arrowContainerStyle,\n        ...createCssVarsForStyleProp({\n          '--arrow-size': `${arrowSize}px`,\n          '--background-color': backgroundColor,\n          '--border-color': borderColor,\n        }),\n      }}\n    >\n      <div className={cx(styles.arrow, arrowClassName)} style={arrowStyle} />\n      <div className={styles.content} ref={contentRef}>\n        <div className={styles.title} ref={titleRef}></div>\n        <div className={styles.subtitle} ref={subtitleRef}></div>\n      </div>\n    </div>,\n    document.body\n  );\n}\n","import { tooltipGroups } from './tooltip-groups';\nimport { deferredHideTooltip, deferredShowTooltip } from './tooltip-helpers';\nimport { globalTooltipProps, tooltipMethods } from './tooltip-methods';\n\nexport const DEFAULT_DELAY = 1000;\n\nexport interface TooltipProps {\n  title: string;\n  subtitle?: string;\n  maxWidth?: string;\n}\n\nexport function tooltip(\n  title: string,\n  {\n    groupId,\n    ...appTooltipProps\n  }: { groupId?: string | null } & Omit<TooltipProps, 'title'> = {}\n) {\n  return (element: HTMLElement | null) => {\n    function onMouseEnter(e: MouseEvent) {\n      const wrappingGroupId = element!.closest<HTMLElement>(\n        '[data-ok-tooltip-group-id]'\n      )?.dataset.okTooltipGroupId;\n\n      // If groupId is undefined, we fallback to wrappingGroupId.\n      // If groupId === null, we want selectdGroupId to be null as well.\n      // Otherwise (groupId is of type string), we use groupId.\n      //\n      const selectedGroupId = groupId === undefined ? wrappingGroupId : groupId;\n\n      const triggerEl = selectedGroupId\n        ? tooltipGroups[selectedGroupId]\n        : element;\n\n      tooltipMethods.setPopperTooltipTriggerRef?.(triggerEl);\n      tooltipMethods.setAppTooltipProps?.({ title, ...appTooltipProps });\n      tooltipMethods.popperTooltipUpdate?.();\n\n      deferredShowTooltip(globalTooltipProps.delay, () =>\n        tooltipMethods.setAppTooltipVisible?.(true)\n      );\n    }\n\n    function onMouseLeave(e: MouseEvent) {\n      deferredHideTooltip(() => tooltipMethods.setAppTooltipVisible?.(false));\n    }\n\n    element?.addEventListener('mouseenter', onMouseEnter);\n    element?.addEventListener('mouseleave', onMouseLeave);\n  };\n}\n"],"names":["singletons","tooltipMethods","globalTooltipProps","delay","cx","_len","arguments","length","args","Array","_key","filter","Boolean","join","timeout","tooltipGroups","state","wait","callback","window","setTimeout","unwait","clearTimeout","_temp","name","_ref","_ref$backgroundColor","backgroundColor","_ref$borderColor","borderColor","_ref$arrowSize","arrowSize","_ref$delay","className","arrowClassName","useEffect","Error","useState","tooltipVisible","_useState","setTooltipVisible","_useState2","childRect","popoverRect","parentRect","boundaryRect","padding","nudgedLeft","nudgedTop","boundaryInset","popoverState","setPopoverState","childRef","useRef","_usePopover","usePopover","positions","align","reposition","parentElement","document","body","boundaryElement","onPositionPopover","positionPopover","popoverRef","useArrowContainer","arrowColor","arrowContainerStyle","arrowStyle","Object","assign","setPopperTooltipTriggerRef","ref","current","undefined","setAppTooltipProps","props","_props$maxWidth","_props$subtitle","contentRef","titleRef","subtitleRef","style","maxWidth","innerText","title","display","subtitle","setAppTooltipVisible","popperTooltipUpdate","keys","forEach","key","ReactDOM","createPortal","React","_extends","visibility","createElement","groupId","appTooltipProps","_objectWithoutPropertiesLoose","_excluded","element","addEventListener","onMouseEnter","e","_element$closest","showTooltip","wrappingGroupId","closest","dataset","okTooltipGroupId","selectedGroupId","onMouseLeave","hideTooltip","Math","round","random","toString","handleMouseOver","currentTarget","capture"],"mappings":"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"}